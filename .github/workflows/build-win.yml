name: Build Win7-Compatible Installers (x86 & x64)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.arch }} (Python ${{ matrix.py }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86
            py: '3.8'
            exe_suffix: win32
            arch_allowed: x86
            install64: 'no'
          - arch: x64
            py: '3.8'
            exe_suffix: win64
            arch_allowed: x64
            install64: 'yes'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.py }} ${{ matrix.arch }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          architecture: ${{ matrix.arch }}

      - name: Show Python version & arch
        shell: pwsh
        run: |
          python --version
          python -c "import struct; print(8*struct.calcsize('P'))"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          } else {
            pip install flask flask-cors pywin32 pyinstaller pyinstaller-hooks-contrib
          }

      - name: Build with PyInstaller (--onedir)
        shell: pwsh
        run: |
          pyinstaller --onedir --noconsole --name PluginServer-${{ matrix.exe_suffix }} Plugin.py
          dir dist

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create Inno Setup script
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist\installer | Out-Null
          $exeSuffix = "${{ matrix.exe_suffix }}"
          $appName   = "Plugin Server"
          $version   = "1.0.${{ github.run_number }}"
          $archAllowed = "${{ matrix.arch_allowed }}"
          $install64   = "${{ matrix.install64 }}"
          $sourceDir = "dist\PluginServer-$exeSuffix"
          $exeName   = "PluginServer-$exeSuffix.exe"
          $outBase   = "PluginServer-Setup-$exeSuffix"
          $issPath   = "installer-$exeSuffix.iss"

          Set-Content -Path $issPath -Value "[Setup]"
          Add-Content -Path $issPath -Value "AppName=$appName"
          Add-Content -Path $issPath -Value "AppVersion=$version"
          Add-Content -Path $issPath -Value "DefaultDirName={pf}\$appName"
          Add-Content -Path $issPath -Value "DefaultGroupName=$appName"
          Add-Content -Path $issPath -Value "OutputBaseFilename=$outBase"
          Add-Content -Path $issPath -Value "OutputDir=dist\installer"
          Add-Content -Path $issPath -Value "ArchitecturesAllowed=$archAllowed"
          Add-Content -Path $issPath -Value "ArchitecturesInstallIn64BitMode=$install64"
          Add-Content -Path $issPath -Value "Compression=lzma"
          Add-Content -Path $issPath -Value "SolidCompression=yes"
          Add-Content -Path $issPath -Value "WizardStyle=modern"
          Add-Content -Path $issPath -Value ""
          Add-Content -Path $issPath -Value "[Languages]"
          Add-Content -Path $issPath -Value 'Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"'
          Add-Content -Path $issPath -Value ""
          Add-Content -Path $issPath -Value "[Files]"
          Add-Content -Path $issPath -Value "Source: `"$sourceDir\*`"; DestDir: `"{app}`"; Flags: ignoreversion recursesubdirs createallsubdirs"
          Add-Content -Path $issPath -Value ""
          Add-Content -Path $issPath -Value "[Icons]"
          Add-Content -Path $issPath -Value 'Name: "{group}\'+$appName+'"; Filename: "{app}\'+$exeName+'"'
          Add-Content -Path $issPath -Value 'Name: "{userdesktop}\'+$appName+'"; Filename: "{app}\'+$exeName+'"; Tasks: desktopicon'
          Add-Content -Path $issPath -Value ""
          Add-Content -Path $issPath -Value "[Tasks]"
          Add-Content -Path $issPath -Value 'Name: "desktopicon"; Description: "Crear icono en el escritorio"; GroupDescription: "Accesos directos:"'
          Add-Content -Path $issPath -Value ""
          Add-Content -Path $issPath -Value "[Run]"
          Add-Content -Path $issPath -Value 'Filename: "{app}\'+$exeName+'"; Description: "Iniciar '+$appName+' al finalizar"; Flags: postinstall nowait'

      - name: Compile installer with Inno Setup
        shell: pwsh
        run: |
          $iscc = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          & "$iscc" "installer-${{ matrix.exe_suffix }}.iss"
          dir dist\installer

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: PluginServer-Setup-${{ matrix.exe_suffix }}
          path: dist/installer/PluginServer-Setup-${{ matrix.exe_suffix }}.exe
