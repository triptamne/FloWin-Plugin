name: Build Win7-Compatible Installers (x86 & x64)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.arch }} (Python ${{ matrix.py }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86
            py: "3.8"
            exe_suffix: "win32"
          - arch: x64
            py: "3.8"
            exe_suffix: "win64"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.py }} ${{ matrix.arch }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          architecture: ${{ matrix.arch }}

      - name: Show Python version & arch
        shell: pwsh
        run: |
          python --version
          python - << 'PY'
          import struct, sys
          print("Bits:", 8*struct.calcsize('P'), "Platform:", sys.platform)
          PY

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          } else {
            pip install flask flask-cors pywin32 pyinstaller pyinstaller-hooks-contrib
          }

      # Build en --onedir para menor tasa de falsos positivos y buena compatibilidad Win7
      - name: Build with PyInstaller (--onedir)
        shell: pwsh
        run: >
          pyinstaller --onedir --noconsole
          --name "PluginServer-${{ matrix.exe_suffix }}"
          Plugin.py

      - name: Verify dist contents
        run: dir dist

      - name: Install Inno Setup
        run: choco install innosetup -y

      # Generamos un .iss simple SIN preprocesador complicado para evitar errores YAML
      - name: Create Inno Setup script
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist\installer | Out-Null
          $exeSuffix="${{ matrix.exe_suffix }}"
          $appName="Plugin Server"
          $version="1.0.${{ github.run_number }}"
          $archAllowed = if ($exeSuffix -eq 'win32') {'x86'} else {'x64'}
          $install64   = if ($exeSuffix -eq 'win32') {'no'}  else {'yes'}
          $sourceDir   = "dist\PluginServer-$exeSuffix"
          $exeName     = "PluginServer-$exeSuffix.exe"
          $outBase     = "PluginServer-Setup-$exeSuffix"
          $issPath     = "installer-$exeSuffix.iss"

          $content = @"
[Setup]
AppName=$appName
AppVersion=$version
DefaultDirName={pf}\$appName
DefaultGroupName=$appName
OutputBaseFilename=$outBase
OutputDir=dist\installer
ArchitecturesAllowed=$archAllowed
ArchitecturesInstallIn64BitMode=$install64
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Files]
Source: "$sourceDir\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\$appName"; Filename: "{app}\$exeName"
Name: "{userdesktop}\$appName"; Filename: "{app}\$exeName"; Tasks: desktopicon

[Tasks]
Name: "desktopicon"; Description: "Crear icono en el escritorio"; GroupDescription: "Accesos directos:"

[Run]
Filename: "{app}\$exeName"; Description: "Iniciar $appName al finalizar"; Flags: postinstall nowait
"@

          Set-Content -Path $issPath -Value $content -Encoding UTF8

      - name: Compile installer with Inno Setup
        shell: pwsh
        run: |
          $iscc = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          & "$iscc" "installer-${{ matrix.exe_suffix }}.iss"

      - name: List installer output
        run: dir dist\installer

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: PluginServer-Setup-${{ matrix.exe_suffix }}
          path: dist/installer/PluginServer-Setup-${{ matrix.exe_suffix }}.exe
